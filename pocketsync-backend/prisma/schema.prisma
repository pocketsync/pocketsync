generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String              @db.VarChar(255)
  createdAt         DateTime            @default(now()) @map("created_at") @db.Timestamp()
  updatedAt         DateTime            @default(now()) @map("updated_at") @db.Timestamp()
  deletedAt         DateTime?           @map("deleted_at") @db.Timestamp()
  appUsers          AppUser[]
  user              User                @relation(fields: [userId], references: [id])
  userId            String              @map("user_id") @db.Uuid
  projectAuthTokens ProjectAuthTokens[]
  deviceChanges     DeviceChange[]
  syncLogs          SyncLog[]
  syncMetrics       SyncMetric[]
  debugSettings     DebugSettings?

  @@map("projects")
}

model AppUser {
  userIdentifier String         @id @map("user_identifier") @db.VarChar(255)
  projectId      String         @map("project_id") @db.Uuid
  createdAt      DateTime       @default(now()) @map("created_at") @db.Timestamp()
  deletedAt      DateTime?      @map("deleted_at") @db.Timestamp()
  project        Project        @relation(fields: [projectId], references: [id])
  deviceChanges  DeviceChange[]
  devices        Device[]
  syncLogs       SyncLog[]

  @@map("app_users")
}

model Device {
  deviceId       String         @map("device_id") @db.VarChar(255)
  userIdentifier String         @map("user_identifier") @db.VarChar(255)
  lastSeenAt     DateTime?      @map("last_seen_at") @db.Timestamp()
  lastChangeAt   DateTime?      @map("last_change_at") @db.Timestamp()
  createdAt      DateTime       @default(now()) @map("created_at") @db.Timestamp()
  deletedAt      DateTime?      @map("deleted_at") @db.Timestamp()
  deviceInfo     Json?          @map("device_info") @db.JsonB
  appUser        AppUser        @relation(fields: [userIdentifier], references: [userIdentifier])
  deviceChanges  DeviceChange[]
  syncLogs       SyncLog[]
  syncSessions   SyncSession[]
  lastSyncStatus SyncStatus?    @map("last_sync_status")

  @@id([deviceId, userIdentifier])
  @@map("devices")
}

enum ChangeType {
  CREATE
  UPDATE
  DELETE
}

model DeviceChange {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  changeId        String       @map("change_id") @db.VarChar(255)
  projectId       String       @map("project_id") @db.Uuid
  userIdentifier  String       @map("user_identifier") @db.VarChar(255)
  deviceId        String       @map("device_id") @db.VarChar(255)
  changeType      ChangeType   @map("change_type")
  tableName       String       @map("table_name") @db.VarChar(255)
  recordId        String       @map("record_id") @db.VarChar(255)
  data            Json         @map("data") @db.JsonB
  clientTimestamp DateTime     @map("client_timestamp") @db.Timestamp()
  clientVersion   Int          @map("client_version")
  createdAt       DateTime     @default(now()) @map("created_at") @db.Timestamp()
  deletedAt       DateTime?    @map("deleted_at") @db.Timestamp()
  syncSessionId   String?      @map("sync_session_id") @db.Uuid
  syncSession     SyncSession? @relation(fields: [syncSessionId], references: [id])
  device          Device       @relation(fields: [deviceId, userIdentifier], references: [deviceId, userIdentifier])
  appUser         AppUser      @relation(fields: [userIdentifier], references: [userIdentifier])
  project         Project      @relation(fields: [projectId], references: [id])

  @@map("device_changes")
}

enum LogLevel {
  INFO
  WARNING
  ERROR
  DEBUG
}

model SyncLog {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  projectId      String       @map("project_id") @db.Uuid
  userIdentifier String?      @map("user_identifier") @db.VarChar(255)
  deviceId       String?      @map("device_id") @db.VarChar(255)
  message        String       @db.Text
  level          LogLevel     @default(INFO)
  timestamp      DateTime     @default(now()) @db.Timestamp()
  metadata       Json?        @db.JsonB
  syncSessionId  String?      @map("sync_session_id") @db.Uuid
  project        Project      @relation(fields: [projectId], references: [id])
  appUser        AppUser?     @relation(fields: [userIdentifier], references: [userIdentifier])
  device         Device?      @relation(fields: [deviceId, userIdentifier], references: [deviceId, userIdentifier])
  syncSession    SyncSession? @relation(fields: [syncSessionId], references: [id])

  @@map("sync_logs")
}

model SyncMetric {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  projectId      String   @map("project_id") @db.Uuid
  userIdentifier String?  @map("user_identifier") @db.VarChar(255)
  deviceId       String?  @map("device_id") @db.VarChar(255)
  metricType     String   @map("metric_type") @db.VarChar(100)
  value          Float
  timestamp      DateTime @default(now()) @db.Timestamp()
  metadata       Json?    @db.JsonB
  project        Project  @relation(fields: [projectId], references: [id])

  @@map("sync_metrics")
}

model SyncSession {
  id             String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  deviceId       String         @map("device_id") @db.VarChar(255)
  userIdentifier String         @map("user_identifier") @db.VarChar(255)
  startTime      DateTime       @default(now()) @map("start_time") @db.Timestamp()
  endTime        DateTime?      @map("end_time") @db.Timestamp()
  status         SyncStatus     @default(IN_PROGRESS)
  changesCount   Int            @default(0) @map("changes_count")
  syncDuration   Int?           @map("sync_duration") // Duration in milliseconds
  device         Device         @relation(fields: [deviceId, userIdentifier], references: [deviceId, userIdentifier])
  deviceChanges  DeviceChange[]
  logs           SyncLog[]

  @@map("sync_sessions")
}

enum SyncStatus {
  SUCCESS
  FAILED
  IN_PROGRESS
}

model DebugSettings {
  id                      String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  projectId               String   @unique @map("project_id") @db.Uuid
  logLevel                LogLevel @default(INFO) @map("log_level")
  retentionDays           Int      @default(30) @map("retention_days")
  enableDataDiffing       Boolean  @default(true) @map("enable_data_diffing")
  enableDetailedLogs      Boolean  @default(false) @map("enable_detailed_logs")
  enableMetricsCollection Boolean  @default(true) @map("enable_metrics_collection")
  notifyOnError           Boolean  @default(true) @map("notify_on_error")
  notifyOnWarning         Boolean  @default(false) @map("notify_on_warning")
  project                 Project  @relation(fields: [projectId], references: [id])

  @@map("debug_settings")
}

model DataExportJob {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  projectId   String    @map("project_id") @db.Uuid
  userId      String    @map("user_id") @db.Uuid
  status      String    @default("PENDING") @db.VarChar(50)
  filters     Json      @db.JsonB
  formatType  String    @map("format_type") @db.VarChar(50)
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamp()
  completedAt DateTime? @map("completed_at") @db.Timestamp()
  downloadUrl String?   @map("download_url") @db.Text
  expiresAt   DateTime? @map("expires_at") @db.Timestamp()

  @@map("data_export_jobs")
}

model NotificationSettings {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId           String   @unique @map("user_id") @db.Uuid
  marketingEnabled Boolean  @default(true) @map("marketing_enabled")
  emailEnabled     Boolean  @default(true) @map("email_enabled")
  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamp()
  updatedAt        DateTime @default(now()) @map("updated_at") @db.Timestamp()
  user             User     @relation(fields: [userId], references: [id])

  @@map("notification_settings")
}

model PasswordResetToken {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  token     String   @unique @db.VarChar(255)
  userId    String   @map("user_id") @db.Uuid
  expiresAt DateTime @map("expires_at") @db.Timestamp()
  user      User     @relation(fields: [userId], references: [id])
  used      Boolean  @default(false)

  @@map("password_reset_tokens")
}

model EmailVerificationToken {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  token     String   @unique @db.VarChar(255)
  userId    String   @map("user_id") @db.Uuid
  expiresAt DateTime @map("expires_at") @db.Timestamp()
  used      Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verification_tokens")
}

model User {
  id                   String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                String                   @unique @db.VarChar(255)
  passwordHash         String?                  @map("password_hash") @db.VarChar(255)
  firstName            String?                  @map("first_name") @db.VarChar(255)
  lastName             String?                  @map("last_name") @db.VarChar(255)
  avatarUrl            String?                  @map("avatar_url") @db.Text
  isEmailVerified      Boolean                  @default(false) @map("is_email_verified")
  createdAt            DateTime                 @default(now()) @map("created_at") @db.Timestamp()
  updatedAt            DateTime                 @default(now()) @map("updated_at") @db.Timestamp()
  projects             Project[]
  socialConnections    UserSocialConnection[]
  refreshTokens        RefreshToken[]
  projectAuthTokens    ProjectAuthTokens[]
  notificationSettings NotificationSettings?
  passwordResetTokens  PasswordResetToken[]
  emailVerifications   EmailVerificationToken[]

  @@map("users")
}

model OAuthProvider {
  id           String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String                 @unique @db.VarChar(50)
  clientId     String                 @map("client_id") @db.VarChar(255)
  clientSecret String                 @map("client_secret") @db.VarChar(255)
  createdAt    DateTime               @default(now()) @map("created_at") @db.Timestamp()
  updatedAt    DateTime               @default(now()) @map("updated_at") @db.Timestamp()
  connections  UserSocialConnection[]

  @@map("oauth_providers")
}

model UserSocialConnection {
  id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId         String        @map("user_id") @db.Uuid
  providerId     String        @map("provider_id") @db.Uuid
  providerUserId String        @map("provider_user_id") @db.VarChar(255)
  accessToken    String        @map("access_token") @db.Text
  refreshToken   String?       @map("refresh_token") @db.Text
  tokenExpiresAt DateTime?     @map("token_expires_at") @db.Timestamp()
  providerData   Json?         @map("provider_data") @db.JsonB
  createdAt      DateTime      @default(now()) @map("created_at") @db.Timestamp()
  updatedAt      DateTime      @default(now()) @map("updated_at") @db.Timestamp()
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider       OAuthProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@unique([providerId, providerUserId])
  @@map("user_social_connections")
}

model RefreshToken {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  token     String   @unique @db.VarChar(255)
  expiresAt DateTime @map("expires_at") @db.Timestamp()
  revoked   Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp()
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp()
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model ProjectAuthTokens {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  projectId String   @map("project_id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  name      String?  @db.VarChar(255)
  token     String   @unique @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp()
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp()
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("auth_tokens")
}
