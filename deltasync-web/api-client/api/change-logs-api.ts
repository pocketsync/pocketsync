/* tslint:disable */
/* eslint-disable */
/**
 * DeltaSync API
 * API documentation for DeltaSync backend services
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
/**
 * ChangeLogsApi - axios parameter creator
 * @export
 */
export const ChangeLogsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} xUserId 
         * @param {string} xProjectId 
         * @param {string} xDeviceId 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeLogsControllerSubmitChange: async (xUserId: string, xProjectId: string, xDeviceId: string, body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xUserId' is not null or undefined
            assertParamExists('changeLogsControllerSubmitChange', 'xUserId', xUserId)
            // verify required parameter 'xProjectId' is not null or undefined
            assertParamExists('changeLogsControllerSubmitChange', 'xProjectId', xProjectId)
            // verify required parameter 'xDeviceId' is not null or undefined
            assertParamExists('changeLogsControllerSubmitChange', 'xDeviceId', xDeviceId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('changeLogsControllerSubmitChange', 'body', body)
            const localVarPath = `/sdk/changes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (xUserId != null) {
                localVarHeaderParameter['x-user-id'] = String(xUserId);
            }
            if (xProjectId != null) {
                localVarHeaderParameter['x-project-id'] = String(xProjectId);
            }
            if (xDeviceId != null) {
                localVarHeaderParameter['x-device-id'] = String(xDeviceId);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChangeLogsApi - functional programming interface
 * @export
 */
export const ChangeLogsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChangeLogsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} xUserId 
         * @param {string} xProjectId 
         * @param {string} xDeviceId 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeLogsControllerSubmitChange(xUserId: string, xProjectId: string, xDeviceId: string, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeLogsControllerSubmitChange(xUserId, xProjectId, xDeviceId, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChangeLogsApi.changeLogsControllerSubmitChange']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ChangeLogsApi - factory interface
 * @export
 */
export const ChangeLogsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChangeLogsApiFp(configuration)
    return {
        /**
         * 
         * @param {string} xUserId 
         * @param {string} xProjectId 
         * @param {string} xDeviceId 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeLogsControllerSubmitChange(xUserId: string, xProjectId: string, xDeviceId: string, body: object, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.changeLogsControllerSubmitChange(xUserId, xProjectId, xDeviceId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ChangeLogsApi - object-oriented interface
 * @export
 * @class ChangeLogsApi
 * @extends {BaseAPI}
 */
export class ChangeLogsApi extends BaseAPI {
    /**
     * 
     * @param {string} xUserId 
     * @param {string} xProjectId 
     * @param {string} xDeviceId 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChangeLogsApi
     */
    public changeLogsControllerSubmitChange(xUserId: string, xProjectId: string, xDeviceId: string, body: object, options?: RawAxiosRequestConfig) {
        return ChangeLogsApiFp(this.configuration).changeLogsControllerSubmitChange(xUserId, xProjectId, xDeviceId, body, options).then((request) => request(this.axios, this.basePath));
    }
}

