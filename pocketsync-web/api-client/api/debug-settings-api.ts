/* tslint:disable */
/* eslint-disable */
/**
 * PocketSync API
 * API documentation for PocketSync backend services
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { DebugSettingsDto } from '../model';
// @ts-ignore
import type { UpdateDebugSettingsDto } from '../model';
/**
 * DebugSettingsApi - axios parameter creator
 * @export
 */
export const DebugSettingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get debug settings for a project
         * @param {string} projectId Project ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        debugSettingsControllerGetDebugSettings: async (projectId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('debugSettingsControllerGetDebugSettings', 'projectId', projectId)
            const localVarPath = `/debug-settings/project/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Reset debug settings to defaults for a project
         * @param {string} projectId Project ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        debugSettingsControllerResetDebugSettings: async (projectId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('debugSettingsControllerResetDebugSettings', 'projectId', projectId)
            const localVarPath = `/debug-settings/project/{projectId}/reset`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update debug settings for a project
         * @param {string} projectId Project ID
         * @param {UpdateDebugSettingsDto} updateDebugSettingsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        debugSettingsControllerUpdateDebugSettings: async (projectId: string, updateDebugSettingsDto: UpdateDebugSettingsDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('debugSettingsControllerUpdateDebugSettings', 'projectId', projectId)
            // verify required parameter 'updateDebugSettingsDto' is not null or undefined
            assertParamExists('debugSettingsControllerUpdateDebugSettings', 'updateDebugSettingsDto', updateDebugSettingsDto)
            const localVarPath = `/debug-settings/project/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateDebugSettingsDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DebugSettingsApi - functional programming interface
 * @export
 */
export const DebugSettingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DebugSettingsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get debug settings for a project
         * @param {string} projectId Project ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async debugSettingsControllerGetDebugSettings(projectId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DebugSettingsDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.debugSettingsControllerGetDebugSettings(projectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DebugSettingsApi.debugSettingsControllerGetDebugSettings']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Reset debug settings to defaults for a project
         * @param {string} projectId Project ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async debugSettingsControllerResetDebugSettings(projectId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DebugSettingsDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.debugSettingsControllerResetDebugSettings(projectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DebugSettingsApi.debugSettingsControllerResetDebugSettings']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update debug settings for a project
         * @param {string} projectId Project ID
         * @param {UpdateDebugSettingsDto} updateDebugSettingsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async debugSettingsControllerUpdateDebugSettings(projectId: string, updateDebugSettingsDto: UpdateDebugSettingsDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DebugSettingsDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.debugSettingsControllerUpdateDebugSettings(projectId, updateDebugSettingsDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DebugSettingsApi.debugSettingsControllerUpdateDebugSettings']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DebugSettingsApi - factory interface
 * @export
 */
export const DebugSettingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DebugSettingsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get debug settings for a project
         * @param {string} projectId Project ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        debugSettingsControllerGetDebugSettings(projectId: string, options?: RawAxiosRequestConfig): AxiosPromise<DebugSettingsDto> {
            return localVarFp.debugSettingsControllerGetDebugSettings(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Reset debug settings to defaults for a project
         * @param {string} projectId Project ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        debugSettingsControllerResetDebugSettings(projectId: string, options?: RawAxiosRequestConfig): AxiosPromise<DebugSettingsDto> {
            return localVarFp.debugSettingsControllerResetDebugSettings(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update debug settings for a project
         * @param {string} projectId Project ID
         * @param {UpdateDebugSettingsDto} updateDebugSettingsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        debugSettingsControllerUpdateDebugSettings(projectId: string, updateDebugSettingsDto: UpdateDebugSettingsDto, options?: RawAxiosRequestConfig): AxiosPromise<DebugSettingsDto> {
            return localVarFp.debugSettingsControllerUpdateDebugSettings(projectId, updateDebugSettingsDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DebugSettingsApi - object-oriented interface
 * @export
 * @class DebugSettingsApi
 * @extends {BaseAPI}
 */
export class DebugSettingsApi extends BaseAPI {
    /**
     * 
     * @summary Get debug settings for a project
     * @param {string} projectId Project ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DebugSettingsApi
     */
    public debugSettingsControllerGetDebugSettings(projectId: string, options?: RawAxiosRequestConfig) {
        return DebugSettingsApiFp(this.configuration).debugSettingsControllerGetDebugSettings(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Reset debug settings to defaults for a project
     * @param {string} projectId Project ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DebugSettingsApi
     */
    public debugSettingsControllerResetDebugSettings(projectId: string, options?: RawAxiosRequestConfig) {
        return DebugSettingsApiFp(this.configuration).debugSettingsControllerResetDebugSettings(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update debug settings for a project
     * @param {string} projectId Project ID
     * @param {UpdateDebugSettingsDto} updateDebugSettingsDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DebugSettingsApi
     */
    public debugSettingsControllerUpdateDebugSettings(projectId: string, updateDebugSettingsDto: UpdateDebugSettingsDto, options?: RawAxiosRequestConfig) {
        return DebugSettingsApiFp(this.configuration).debugSettingsControllerUpdateDebugSettings(projectId, updateDebugSettingsDto, options).then((request) => request(this.axios, this.basePath));
    }
}

