/* tslint:disable */
/* eslint-disable */
/**
 * PocketSync API
 * API documentation for PocketSync backend services
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { DeviceDto } from '../model';
// @ts-ignore
import type { DeviceResponseDto } from '../model';
/**
 * DevicesApi - axios parameter creator
 * @export
 */
export const DevicesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete a device (soft delete)
         * @param {string} deviceId Device ID
         * @param {string} userIdentifier User identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesControllerDeleteDevice: async (deviceId: string, userIdentifier: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('devicesControllerDeleteDevice', 'deviceId', deviceId)
            // verify required parameter 'userIdentifier' is not null or undefined
            assertParamExists('devicesControllerDeleteDevice', 'userIdentifier', userIdentifier)
            const localVarPath = `/devices/{deviceId}/user/{userIdentifier}`
                .replace(`{${"deviceId"}}`, encodeURIComponent(String(deviceId)))
                .replace(`{${"userIdentifier"}}`, encodeURIComponent(String(userIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a device by ID and user identifier
         * @param {string} deviceId Device ID
         * @param {string} userIdentifier User identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesControllerGetDevice: async (deviceId: string, userIdentifier: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('devicesControllerGetDevice', 'deviceId', deviceId)
            // verify required parameter 'userIdentifier' is not null or undefined
            assertParamExists('devicesControllerGetDevice', 'userIdentifier', userIdentifier)
            const localVarPath = `/devices/{deviceId}/user/{userIdentifier}`
                .replace(`{${"deviceId"}}`, encodeURIComponent(String(deviceId)))
                .replace(`{${"userIdentifier"}}`, encodeURIComponent(String(userIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get devices for a specific project
         * @param {string} projectId Project ID
         * @param {boolean} [includeDeleted] Include deleted devices
         * @param {number} [limit] Number of devices to return
         * @param {number} [offset] Number of devices to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesControllerGetDevicesByProject: async (projectId: string, includeDeleted?: boolean, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('devicesControllerGetDevicesByProject', 'projectId', projectId)
            const localVarPath = `/devices/project/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (includeDeleted !== undefined) {
                localVarQueryParameter['includeDeleted'] = includeDeleted;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get devices for a specific user
         * @param {string} userIdentifier User identifier
         * @param {boolean} [includeDeleted] Include deleted devices
         * @param {number} [limit] Number of devices to return
         * @param {number} [offset] Number of devices to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesControllerGetDevicesByUser: async (userIdentifier: string, includeDeleted?: boolean, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userIdentifier' is not null or undefined
            assertParamExists('devicesControllerGetDevicesByUser', 'userIdentifier', userIdentifier)
            const localVarPath = `/devices/user/{userIdentifier}`
                .replace(`{${"userIdentifier"}}`, encodeURIComponent(String(userIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (includeDeleted !== undefined) {
                localVarQueryParameter['includeDeleted'] = includeDeleted;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update device information
         * @param {string} deviceId Device ID
         * @param {string} userIdentifier User identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesControllerUpdateDeviceInfo: async (deviceId: string, userIdentifier: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('devicesControllerUpdateDeviceInfo', 'deviceId', deviceId)
            // verify required parameter 'userIdentifier' is not null or undefined
            assertParamExists('devicesControllerUpdateDeviceInfo', 'userIdentifier', userIdentifier)
            const localVarPath = `/devices/{deviceId}/user/{userIdentifier}/info`
                .replace(`{${"deviceId"}}`, encodeURIComponent(String(deviceId)))
                .replace(`{${"userIdentifier"}}`, encodeURIComponent(String(userIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update device sync status
         * @param {string} deviceId Device ID
         * @param {string} userIdentifier User identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesControllerUpdateSyncStatus: async (deviceId: string, userIdentifier: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('devicesControllerUpdateSyncStatus', 'deviceId', deviceId)
            // verify required parameter 'userIdentifier' is not null or undefined
            assertParamExists('devicesControllerUpdateSyncStatus', 'userIdentifier', userIdentifier)
            const localVarPath = `/devices/{deviceId}/user/{userIdentifier}/status`
                .replace(`{${"deviceId"}}`, encodeURIComponent(String(deviceId)))
                .replace(`{${"userIdentifier"}}`, encodeURIComponent(String(userIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DevicesApi - functional programming interface
 * @export
 */
export const DevicesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DevicesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete a device (soft delete)
         * @param {string} deviceId Device ID
         * @param {string} userIdentifier User identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async devicesControllerDeleteDevice(deviceId: string, userIdentifier: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.devicesControllerDeleteDevice(deviceId, userIdentifier, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DevicesApi.devicesControllerDeleteDevice']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a device by ID and user identifier
         * @param {string} deviceId Device ID
         * @param {string} userIdentifier User identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async devicesControllerGetDevice(deviceId: string, userIdentifier: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.devicesControllerGetDevice(deviceId, userIdentifier, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DevicesApi.devicesControllerGetDevice']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get devices for a specific project
         * @param {string} projectId Project ID
         * @param {boolean} [includeDeleted] Include deleted devices
         * @param {number} [limit] Number of devices to return
         * @param {number} [offset] Number of devices to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async devicesControllerGetDevicesByProject(projectId: string, includeDeleted?: boolean, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.devicesControllerGetDevicesByProject(projectId, includeDeleted, limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DevicesApi.devicesControllerGetDevicesByProject']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get devices for a specific user
         * @param {string} userIdentifier User identifier
         * @param {boolean} [includeDeleted] Include deleted devices
         * @param {number} [limit] Number of devices to return
         * @param {number} [offset] Number of devices to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async devicesControllerGetDevicesByUser(userIdentifier: string, includeDeleted?: boolean, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.devicesControllerGetDevicesByUser(userIdentifier, includeDeleted, limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DevicesApi.devicesControllerGetDevicesByUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update device information
         * @param {string} deviceId Device ID
         * @param {string} userIdentifier User identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async devicesControllerUpdateDeviceInfo(deviceId: string, userIdentifier: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.devicesControllerUpdateDeviceInfo(deviceId, userIdentifier, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DevicesApi.devicesControllerUpdateDeviceInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update device sync status
         * @param {string} deviceId Device ID
         * @param {string} userIdentifier User identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async devicesControllerUpdateSyncStatus(deviceId: string, userIdentifier: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.devicesControllerUpdateSyncStatus(deviceId, userIdentifier, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DevicesApi.devicesControllerUpdateSyncStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DevicesApi - factory interface
 * @export
 */
export const DevicesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DevicesApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete a device (soft delete)
         * @param {string} deviceId Device ID
         * @param {string} userIdentifier User identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesControllerDeleteDevice(deviceId: string, userIdentifier: string, options?: RawAxiosRequestConfig): AxiosPromise<DeviceDto> {
            return localVarFp.devicesControllerDeleteDevice(deviceId, userIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a device by ID and user identifier
         * @param {string} deviceId Device ID
         * @param {string} userIdentifier User identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesControllerGetDevice(deviceId: string, userIdentifier: string, options?: RawAxiosRequestConfig): AxiosPromise<DeviceDto> {
            return localVarFp.devicesControllerGetDevice(deviceId, userIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get devices for a specific project
         * @param {string} projectId Project ID
         * @param {boolean} [includeDeleted] Include deleted devices
         * @param {number} [limit] Number of devices to return
         * @param {number} [offset] Number of devices to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesControllerGetDevicesByProject(projectId: string, includeDeleted?: boolean, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<DeviceResponseDto> {
            return localVarFp.devicesControllerGetDevicesByProject(projectId, includeDeleted, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get devices for a specific user
         * @param {string} userIdentifier User identifier
         * @param {boolean} [includeDeleted] Include deleted devices
         * @param {number} [limit] Number of devices to return
         * @param {number} [offset] Number of devices to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesControllerGetDevicesByUser(userIdentifier: string, includeDeleted?: boolean, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<DeviceResponseDto> {
            return localVarFp.devicesControllerGetDevicesByUser(userIdentifier, includeDeleted, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update device information
         * @param {string} deviceId Device ID
         * @param {string} userIdentifier User identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesControllerUpdateDeviceInfo(deviceId: string, userIdentifier: string, options?: RawAxiosRequestConfig): AxiosPromise<DeviceDto> {
            return localVarFp.devicesControllerUpdateDeviceInfo(deviceId, userIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update device sync status
         * @param {string} deviceId Device ID
         * @param {string} userIdentifier User identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        devicesControllerUpdateSyncStatus(deviceId: string, userIdentifier: string, options?: RawAxiosRequestConfig): AxiosPromise<DeviceDto> {
            return localVarFp.devicesControllerUpdateSyncStatus(deviceId, userIdentifier, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DevicesApi - object-oriented interface
 * @export
 * @class DevicesApi
 * @extends {BaseAPI}
 */
export class DevicesApi extends BaseAPI {
    /**
     * 
     * @summary Delete a device (soft delete)
     * @param {string} deviceId Device ID
     * @param {string} userIdentifier User identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public devicesControllerDeleteDevice(deviceId: string, userIdentifier: string, options?: RawAxiosRequestConfig) {
        return DevicesApiFp(this.configuration).devicesControllerDeleteDevice(deviceId, userIdentifier, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a device by ID and user identifier
     * @param {string} deviceId Device ID
     * @param {string} userIdentifier User identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public devicesControllerGetDevice(deviceId: string, userIdentifier: string, options?: RawAxiosRequestConfig) {
        return DevicesApiFp(this.configuration).devicesControllerGetDevice(deviceId, userIdentifier, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get devices for a specific project
     * @param {string} projectId Project ID
     * @param {boolean} [includeDeleted] Include deleted devices
     * @param {number} [limit] Number of devices to return
     * @param {number} [offset] Number of devices to skip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public devicesControllerGetDevicesByProject(projectId: string, includeDeleted?: boolean, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return DevicesApiFp(this.configuration).devicesControllerGetDevicesByProject(projectId, includeDeleted, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get devices for a specific user
     * @param {string} userIdentifier User identifier
     * @param {boolean} [includeDeleted] Include deleted devices
     * @param {number} [limit] Number of devices to return
     * @param {number} [offset] Number of devices to skip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public devicesControllerGetDevicesByUser(userIdentifier: string, includeDeleted?: boolean, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return DevicesApiFp(this.configuration).devicesControllerGetDevicesByUser(userIdentifier, includeDeleted, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update device information
     * @param {string} deviceId Device ID
     * @param {string} userIdentifier User identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public devicesControllerUpdateDeviceInfo(deviceId: string, userIdentifier: string, options?: RawAxiosRequestConfig) {
        return DevicesApiFp(this.configuration).devicesControllerUpdateDeviceInfo(deviceId, userIdentifier, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update device sync status
     * @param {string} deviceId Device ID
     * @param {string} userIdentifier User identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public devicesControllerUpdateSyncStatus(deviceId: string, userIdentifier: string, options?: RawAxiosRequestConfig) {
        return DevicesApiFp(this.configuration).devicesControllerUpdateSyncStatus(deviceId, userIdentifier, options).then((request) => request(this.axios, this.basePath));
    }
}

