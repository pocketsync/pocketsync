/* tslint:disable */
/* eslint-disable */
/**
 * PocketSync API
 * API documentation for PocketSync backend services
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { DefaultSuccessResponse } from '../model';
// @ts-ignore
import type { SyncChange } from '../model';
// @ts-ignore
import type { SyncChangeBatchDto } from '../model';
/**
 * SyncApi - axios parameter creator
 * @export
 */
export const SyncApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Download changes
         * @param {string} xProjectId Project ID
         * @param {string} authorization Project auth token
         * @param {number} since 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncControllerDownloadChanges: async (xProjectId: string, authorization: string, since: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xProjectId' is not null or undefined
            assertParamExists('syncControllerDownloadChanges', 'xProjectId', xProjectId)
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('syncControllerDownloadChanges', 'authorization', authorization)
            // verify required parameter 'since' is not null or undefined
            assertParamExists('syncControllerDownloadChanges', 'since', since)
            const localVarPath = `/sync/download`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (since !== undefined) {
                localVarQueryParameter['since'] = since;
            }


    
            if (xProjectId != null) {
                localVarHeaderParameter['x-project-id'] = String(xProjectId);
            }
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload changes
         * @param {string} xProjectId Project ID
         * @param {string} authorization Project auth token
         * @param {SyncChangeBatchDto} syncChangeBatchDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncControllerUploadChanges: async (xProjectId: string, authorization: string, syncChangeBatchDto: SyncChangeBatchDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xProjectId' is not null or undefined
            assertParamExists('syncControllerUploadChanges', 'xProjectId', xProjectId)
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('syncControllerUploadChanges', 'authorization', authorization)
            // verify required parameter 'syncChangeBatchDto' is not null or undefined
            assertParamExists('syncControllerUploadChanges', 'syncChangeBatchDto', syncChangeBatchDto)
            const localVarPath = `/sync/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (xProjectId != null) {
                localVarHeaderParameter['x-project-id'] = String(xProjectId);
            }
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(syncChangeBatchDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SyncApi - functional programming interface
 * @export
 */
export const SyncApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SyncApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Download changes
         * @param {string} xProjectId Project ID
         * @param {string} authorization Project auth token
         * @param {number} since 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncControllerDownloadChanges(xProjectId: string, authorization: string, since: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SyncChange>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncControllerDownloadChanges(xProjectId, authorization, since, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SyncApi.syncControllerDownloadChanges']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Upload changes
         * @param {string} xProjectId Project ID
         * @param {string} authorization Project auth token
         * @param {SyncChangeBatchDto} syncChangeBatchDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncControllerUploadChanges(xProjectId: string, authorization: string, syncChangeBatchDto: SyncChangeBatchDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DefaultSuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncControllerUploadChanges(xProjectId, authorization, syncChangeBatchDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SyncApi.syncControllerUploadChanges']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SyncApi - factory interface
 * @export
 */
export const SyncApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SyncApiFp(configuration)
    return {
        /**
         * 
         * @summary Download changes
         * @param {string} xProjectId Project ID
         * @param {string} authorization Project auth token
         * @param {number} since 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncControllerDownloadChanges(xProjectId: string, authorization: string, since: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<SyncChange>> {
            return localVarFp.syncControllerDownloadChanges(xProjectId, authorization, since, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload changes
         * @param {string} xProjectId Project ID
         * @param {string} authorization Project auth token
         * @param {SyncChangeBatchDto} syncChangeBatchDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncControllerUploadChanges(xProjectId: string, authorization: string, syncChangeBatchDto: SyncChangeBatchDto, options?: RawAxiosRequestConfig): AxiosPromise<DefaultSuccessResponse> {
            return localVarFp.syncControllerUploadChanges(xProjectId, authorization, syncChangeBatchDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SyncApi - object-oriented interface
 * @export
 * @class SyncApi
 * @extends {BaseAPI}
 */
export class SyncApi extends BaseAPI {
    /**
     * 
     * @summary Download changes
     * @param {string} xProjectId Project ID
     * @param {string} authorization Project auth token
     * @param {number} since 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncApi
     */
    public syncControllerDownloadChanges(xProjectId: string, authorization: string, since: number, options?: RawAxiosRequestConfig) {
        return SyncApiFp(this.configuration).syncControllerDownloadChanges(xProjectId, authorization, since, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload changes
     * @param {string} xProjectId Project ID
     * @param {string} authorization Project auth token
     * @param {SyncChangeBatchDto} syncChangeBatchDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncApi
     */
    public syncControllerUploadChanges(xProjectId: string, authorization: string, syncChangeBatchDto: SyncChangeBatchDto, options?: RawAxiosRequestConfig) {
        return SyncApiFp(this.configuration).syncControllerUploadChanges(xProjectId, authorization, syncChangeBatchDto, options).then((request) => request(this.axios, this.basePath));
    }
}

