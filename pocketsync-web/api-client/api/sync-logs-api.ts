/* tslint:disable */
/* eslint-disable */
/**
 * PocketSync API
 * API documentation for PocketSync backend services
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { SyncLogResponseDto } from '../model';
/**
 * SyncLogsApi - axios parameter creator
 * @export
 */
export const SyncLogsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get logs for a specific device
         * @param {string} authorization JWT token
         * @param {string} deviceId Device ID
         * @param {string} userIdentifier User identifier
         * @param {number} [limit] Number of logs to return
         * @param {number} [offset] Number of logs to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncLogsControllerGetLogsByDevice: async (authorization: string, deviceId: string, userIdentifier: string, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('syncLogsControllerGetLogsByDevice', 'authorization', authorization)
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('syncLogsControllerGetLogsByDevice', 'deviceId', deviceId)
            // verify required parameter 'userIdentifier' is not null or undefined
            assertParamExists('syncLogsControllerGetLogsByDevice', 'userIdentifier', userIdentifier)
            const localVarPath = `/sync-logs/device/{deviceId}/user/{userIdentifier}`
                .replace(`{${"deviceId"}}`, encodeURIComponent(String(deviceId)))
                .replace(`{${"userIdentifier"}}`, encodeURIComponent(String(userIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get logs for a specific project
         * @param {string} authorization JWT token
         * @param {string} projectId Project ID
         * @param {string} [userIdentifier] Filter by user identifier
         * @param {string} [deviceId] Filter by device ID
         * @param {SyncLogsControllerGetLogsByProjectLevelEnum} [level] Filter by log level
         * @param {string} [syncSessionId] Filter by sync session ID
         * @param {string} [startDate] Filter by start date (ISO format)
         * @param {string} [endDate] Filter by end date (ISO format)
         * @param {number} [limit] Number of logs to return
         * @param {number} [offset] Number of logs to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncLogsControllerGetLogsByProject: async (authorization: string, projectId: string, userIdentifier?: string, deviceId?: string, level?: SyncLogsControllerGetLogsByProjectLevelEnum, syncSessionId?: string, startDate?: string, endDate?: string, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('syncLogsControllerGetLogsByProject', 'authorization', authorization)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('syncLogsControllerGetLogsByProject', 'projectId', projectId)
            const localVarPath = `/sync-logs/project/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userIdentifier !== undefined) {
                localVarQueryParameter['userIdentifier'] = userIdentifier;
            }

            if (deviceId !== undefined) {
                localVarQueryParameter['deviceId'] = deviceId;
            }

            if (level !== undefined) {
                localVarQueryParameter['level'] = level;
            }

            if (syncSessionId !== undefined) {
                localVarQueryParameter['syncSessionId'] = syncSessionId;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get logs for a specific sync session
         * @param {string} authorization JWT token
         * @param {string} sessionId Sync session ID
         * @param {number} [limit] Number of logs to return
         * @param {number} [offset] Number of logs to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncLogsControllerGetLogsBySession: async (authorization: string, sessionId: string, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('syncLogsControllerGetLogsBySession', 'authorization', authorization)
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('syncLogsControllerGetLogsBySession', 'sessionId', sessionId)
            const localVarPath = `/sync-logs/session/{sessionId}`
                .replace(`{${"sessionId"}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SyncLogsApi - functional programming interface
 * @export
 */
export const SyncLogsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SyncLogsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get logs for a specific device
         * @param {string} authorization JWT token
         * @param {string} deviceId Device ID
         * @param {string} userIdentifier User identifier
         * @param {number} [limit] Number of logs to return
         * @param {number} [offset] Number of logs to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncLogsControllerGetLogsByDevice(authorization: string, deviceId: string, userIdentifier: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SyncLogResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncLogsControllerGetLogsByDevice(authorization, deviceId, userIdentifier, limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SyncLogsApi.syncLogsControllerGetLogsByDevice']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get logs for a specific project
         * @param {string} authorization JWT token
         * @param {string} projectId Project ID
         * @param {string} [userIdentifier] Filter by user identifier
         * @param {string} [deviceId] Filter by device ID
         * @param {SyncLogsControllerGetLogsByProjectLevelEnum} [level] Filter by log level
         * @param {string} [syncSessionId] Filter by sync session ID
         * @param {string} [startDate] Filter by start date (ISO format)
         * @param {string} [endDate] Filter by end date (ISO format)
         * @param {number} [limit] Number of logs to return
         * @param {number} [offset] Number of logs to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncLogsControllerGetLogsByProject(authorization: string, projectId: string, userIdentifier?: string, deviceId?: string, level?: SyncLogsControllerGetLogsByProjectLevelEnum, syncSessionId?: string, startDate?: string, endDate?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SyncLogResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncLogsControllerGetLogsByProject(authorization, projectId, userIdentifier, deviceId, level, syncSessionId, startDate, endDate, limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SyncLogsApi.syncLogsControllerGetLogsByProject']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get logs for a specific sync session
         * @param {string} authorization JWT token
         * @param {string} sessionId Sync session ID
         * @param {number} [limit] Number of logs to return
         * @param {number} [offset] Number of logs to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncLogsControllerGetLogsBySession(authorization: string, sessionId: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SyncLogResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncLogsControllerGetLogsBySession(authorization, sessionId, limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SyncLogsApi.syncLogsControllerGetLogsBySession']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SyncLogsApi - factory interface
 * @export
 */
export const SyncLogsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SyncLogsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get logs for a specific device
         * @param {string} authorization JWT token
         * @param {string} deviceId Device ID
         * @param {string} userIdentifier User identifier
         * @param {number} [limit] Number of logs to return
         * @param {number} [offset] Number of logs to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncLogsControllerGetLogsByDevice(authorization: string, deviceId: string, userIdentifier: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<SyncLogResponseDto> {
            return localVarFp.syncLogsControllerGetLogsByDevice(authorization, deviceId, userIdentifier, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get logs for a specific project
         * @param {string} authorization JWT token
         * @param {string} projectId Project ID
         * @param {string} [userIdentifier] Filter by user identifier
         * @param {string} [deviceId] Filter by device ID
         * @param {SyncLogsControllerGetLogsByProjectLevelEnum} [level] Filter by log level
         * @param {string} [syncSessionId] Filter by sync session ID
         * @param {string} [startDate] Filter by start date (ISO format)
         * @param {string} [endDate] Filter by end date (ISO format)
         * @param {number} [limit] Number of logs to return
         * @param {number} [offset] Number of logs to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncLogsControllerGetLogsByProject(authorization: string, projectId: string, userIdentifier?: string, deviceId?: string, level?: SyncLogsControllerGetLogsByProjectLevelEnum, syncSessionId?: string, startDate?: string, endDate?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<SyncLogResponseDto> {
            return localVarFp.syncLogsControllerGetLogsByProject(authorization, projectId, userIdentifier, deviceId, level, syncSessionId, startDate, endDate, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get logs for a specific sync session
         * @param {string} authorization JWT token
         * @param {string} sessionId Sync session ID
         * @param {number} [limit] Number of logs to return
         * @param {number} [offset] Number of logs to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncLogsControllerGetLogsBySession(authorization: string, sessionId: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<SyncLogResponseDto> {
            return localVarFp.syncLogsControllerGetLogsBySession(authorization, sessionId, limit, offset, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SyncLogsApi - object-oriented interface
 * @export
 * @class SyncLogsApi
 * @extends {BaseAPI}
 */
export class SyncLogsApi extends BaseAPI {
    /**
     * 
     * @summary Get logs for a specific device
     * @param {string} authorization JWT token
     * @param {string} deviceId Device ID
     * @param {string} userIdentifier User identifier
     * @param {number} [limit] Number of logs to return
     * @param {number} [offset] Number of logs to skip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncLogsApi
     */
    public syncLogsControllerGetLogsByDevice(authorization: string, deviceId: string, userIdentifier: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return SyncLogsApiFp(this.configuration).syncLogsControllerGetLogsByDevice(authorization, deviceId, userIdentifier, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get logs for a specific project
     * @param {string} authorization JWT token
     * @param {string} projectId Project ID
     * @param {string} [userIdentifier] Filter by user identifier
     * @param {string} [deviceId] Filter by device ID
     * @param {SyncLogsControllerGetLogsByProjectLevelEnum} [level] Filter by log level
     * @param {string} [syncSessionId] Filter by sync session ID
     * @param {string} [startDate] Filter by start date (ISO format)
     * @param {string} [endDate] Filter by end date (ISO format)
     * @param {number} [limit] Number of logs to return
     * @param {number} [offset] Number of logs to skip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncLogsApi
     */
    public syncLogsControllerGetLogsByProject(authorization: string, projectId: string, userIdentifier?: string, deviceId?: string, level?: SyncLogsControllerGetLogsByProjectLevelEnum, syncSessionId?: string, startDate?: string, endDate?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return SyncLogsApiFp(this.configuration).syncLogsControllerGetLogsByProject(authorization, projectId, userIdentifier, deviceId, level, syncSessionId, startDate, endDate, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get logs for a specific sync session
     * @param {string} authorization JWT token
     * @param {string} sessionId Sync session ID
     * @param {number} [limit] Number of logs to return
     * @param {number} [offset] Number of logs to skip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncLogsApi
     */
    public syncLogsControllerGetLogsBySession(authorization: string, sessionId: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return SyncLogsApiFp(this.configuration).syncLogsControllerGetLogsBySession(authorization, sessionId, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const SyncLogsControllerGetLogsByProjectLevelEnum = {
    Info: 'INFO',
    Warning: 'WARNING',
    Error: 'ERROR',
    Debug: 'DEBUG'
} as const;
export type SyncLogsControllerGetLogsByProjectLevelEnum = typeof SyncLogsControllerGetLogsByProjectLevelEnum[keyof typeof SyncLogsControllerGetLogsByProjectLevelEnum];
