/* tslint:disable */
/* eslint-disable */
/**
 * PocketSync API
 * API documentation for PocketSync backend services
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ConflictDto } from '../model';
// @ts-ignore
import type { ConflictResponseDto } from '../model';
// @ts-ignore
import type { ReportConflictDto } from '../model';
/**
 * ConflictsApi - axios parameter creator
 * @export
 */
export const ConflictsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get conflict by ID
         * @param {string} id Conflict ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        conflictsControllerGetConflictById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('conflictsControllerGetConflictById', 'id', id)
            const localVarPath = `/conflicts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get conflicts for a specific project
         * @param {string} projectId Project ID
         * @param {string} [userIdentifier] Filter by user identifier
         * @param {string} [deviceId] Filter by device ID
         * @param {string} [tableName] Filter by table name
         * @param {string} [recordId] Filter by record ID
         * @param {ConflictsControllerGetConflictsByProjectResolutionStrategyEnum} [resolutionStrategy] Filter by resolution strategy
         * @param {string} [startDate] Filter by start date (ISO format)
         * @param {string} [endDate] Filter by end date (ISO format)
         * @param {number} [limit] Number of conflicts to return
         * @param {number} [offset] Number of conflicts to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        conflictsControllerGetConflictsByProject: async (projectId: string, userIdentifier?: string, deviceId?: string, tableName?: string, recordId?: string, resolutionStrategy?: ConflictsControllerGetConflictsByProjectResolutionStrategyEnum, startDate?: string, endDate?: string, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('conflictsControllerGetConflictsByProject', 'projectId', projectId)
            const localVarPath = `/conflicts/project/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userIdentifier !== undefined) {
                localVarQueryParameter['userIdentifier'] = userIdentifier;
            }

            if (deviceId !== undefined) {
                localVarQueryParameter['deviceId'] = deviceId;
            }

            if (tableName !== undefined) {
                localVarQueryParameter['tableName'] = tableName;
            }

            if (recordId !== undefined) {
                localVarQueryParameter['recordId'] = recordId;
            }

            if (resolutionStrategy !== undefined) {
                localVarQueryParameter['resolutionStrategy'] = resolutionStrategy;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get conflicts for a specific record
         * @param {string} tableName Table name
         * @param {string} recordId Record ID
         * @param {number} [limit] Number of conflicts to return
         * @param {number} [offset] Number of conflicts to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        conflictsControllerGetConflictsByRecord: async (tableName: string, recordId: string, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tableName' is not null or undefined
            assertParamExists('conflictsControllerGetConflictsByRecord', 'tableName', tableName)
            // verify required parameter 'recordId' is not null or undefined
            assertParamExists('conflictsControllerGetConflictsByRecord', 'recordId', recordId)
            const localVarPath = `/conflicts/record/{tableName}/{recordId}`
                .replace(`{${"tableName"}}`, encodeURIComponent(String(tableName)))
                .replace(`{${"recordId"}}`, encodeURIComponent(String(recordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get conflicts for a specific sync session
         * @param {string} sessionId Sync session ID
         * @param {number} [limit] Number of conflicts to return
         * @param {number} [offset] Number of conflicts to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        conflictsControllerGetConflictsBySession: async (sessionId: string, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('conflictsControllerGetConflictsBySession', 'sessionId', sessionId)
            const localVarPath = `/conflicts/session/{sessionId}`
                .replace(`{${"sessionId"}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Report a conflict from a client
         * @param {string} syncSessionId 
         * @param {string} xProjectId Project ID
         * @param {string} authorization Project auth token
         * @param {ReportConflictDto} reportConflictDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        conflictsControllerReportConflict: async (syncSessionId: string, xProjectId: string, authorization: string, reportConflictDto: ReportConflictDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'syncSessionId' is not null or undefined
            assertParamExists('conflictsControllerReportConflict', 'syncSessionId', syncSessionId)
            // verify required parameter 'xProjectId' is not null or undefined
            assertParamExists('conflictsControllerReportConflict', 'xProjectId', xProjectId)
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('conflictsControllerReportConflict', 'authorization', authorization)
            // verify required parameter 'reportConflictDto' is not null or undefined
            assertParamExists('conflictsControllerReportConflict', 'reportConflictDto', reportConflictDto)
            const localVarPath = `/conflicts/report`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (syncSessionId !== undefined) {
                localVarQueryParameter['syncSessionId'] = syncSessionId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (xProjectId != null) {
                localVarHeaderParameter['x-project-id'] = String(xProjectId);
            }
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reportConflictDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConflictsApi - functional programming interface
 * @export
 */
export const ConflictsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConflictsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get conflict by ID
         * @param {string} id Conflict ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async conflictsControllerGetConflictById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConflictDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.conflictsControllerGetConflictById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConflictsApi.conflictsControllerGetConflictById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get conflicts for a specific project
         * @param {string} projectId Project ID
         * @param {string} [userIdentifier] Filter by user identifier
         * @param {string} [deviceId] Filter by device ID
         * @param {string} [tableName] Filter by table name
         * @param {string} [recordId] Filter by record ID
         * @param {ConflictsControllerGetConflictsByProjectResolutionStrategyEnum} [resolutionStrategy] Filter by resolution strategy
         * @param {string} [startDate] Filter by start date (ISO format)
         * @param {string} [endDate] Filter by end date (ISO format)
         * @param {number} [limit] Number of conflicts to return
         * @param {number} [offset] Number of conflicts to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async conflictsControllerGetConflictsByProject(projectId: string, userIdentifier?: string, deviceId?: string, tableName?: string, recordId?: string, resolutionStrategy?: ConflictsControllerGetConflictsByProjectResolutionStrategyEnum, startDate?: string, endDate?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConflictResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.conflictsControllerGetConflictsByProject(projectId, userIdentifier, deviceId, tableName, recordId, resolutionStrategy, startDate, endDate, limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConflictsApi.conflictsControllerGetConflictsByProject']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get conflicts for a specific record
         * @param {string} tableName Table name
         * @param {string} recordId Record ID
         * @param {number} [limit] Number of conflicts to return
         * @param {number} [offset] Number of conflicts to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async conflictsControllerGetConflictsByRecord(tableName: string, recordId: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConflictResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.conflictsControllerGetConflictsByRecord(tableName, recordId, limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConflictsApi.conflictsControllerGetConflictsByRecord']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get conflicts for a specific sync session
         * @param {string} sessionId Sync session ID
         * @param {number} [limit] Number of conflicts to return
         * @param {number} [offset] Number of conflicts to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async conflictsControllerGetConflictsBySession(sessionId: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConflictResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.conflictsControllerGetConflictsBySession(sessionId, limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConflictsApi.conflictsControllerGetConflictsBySession']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Report a conflict from a client
         * @param {string} syncSessionId 
         * @param {string} xProjectId Project ID
         * @param {string} authorization Project auth token
         * @param {ReportConflictDto} reportConflictDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async conflictsControllerReportConflict(syncSessionId: string, xProjectId: string, authorization: string, reportConflictDto: ReportConflictDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConflictDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.conflictsControllerReportConflict(syncSessionId, xProjectId, authorization, reportConflictDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConflictsApi.conflictsControllerReportConflict']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ConflictsApi - factory interface
 * @export
 */
export const ConflictsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConflictsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get conflict by ID
         * @param {string} id Conflict ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        conflictsControllerGetConflictById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<ConflictDto> {
            return localVarFp.conflictsControllerGetConflictById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get conflicts for a specific project
         * @param {string} projectId Project ID
         * @param {string} [userIdentifier] Filter by user identifier
         * @param {string} [deviceId] Filter by device ID
         * @param {string} [tableName] Filter by table name
         * @param {string} [recordId] Filter by record ID
         * @param {ConflictsControllerGetConflictsByProjectResolutionStrategyEnum} [resolutionStrategy] Filter by resolution strategy
         * @param {string} [startDate] Filter by start date (ISO format)
         * @param {string} [endDate] Filter by end date (ISO format)
         * @param {number} [limit] Number of conflicts to return
         * @param {number} [offset] Number of conflicts to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        conflictsControllerGetConflictsByProject(projectId: string, userIdentifier?: string, deviceId?: string, tableName?: string, recordId?: string, resolutionStrategy?: ConflictsControllerGetConflictsByProjectResolutionStrategyEnum, startDate?: string, endDate?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<ConflictResponseDto> {
            return localVarFp.conflictsControllerGetConflictsByProject(projectId, userIdentifier, deviceId, tableName, recordId, resolutionStrategy, startDate, endDate, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get conflicts for a specific record
         * @param {string} tableName Table name
         * @param {string} recordId Record ID
         * @param {number} [limit] Number of conflicts to return
         * @param {number} [offset] Number of conflicts to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        conflictsControllerGetConflictsByRecord(tableName: string, recordId: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<ConflictResponseDto> {
            return localVarFp.conflictsControllerGetConflictsByRecord(tableName, recordId, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get conflicts for a specific sync session
         * @param {string} sessionId Sync session ID
         * @param {number} [limit] Number of conflicts to return
         * @param {number} [offset] Number of conflicts to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        conflictsControllerGetConflictsBySession(sessionId: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<ConflictResponseDto> {
            return localVarFp.conflictsControllerGetConflictsBySession(sessionId, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Report a conflict from a client
         * @param {string} syncSessionId 
         * @param {string} xProjectId Project ID
         * @param {string} authorization Project auth token
         * @param {ReportConflictDto} reportConflictDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        conflictsControllerReportConflict(syncSessionId: string, xProjectId: string, authorization: string, reportConflictDto: ReportConflictDto, options?: RawAxiosRequestConfig): AxiosPromise<ConflictDto> {
            return localVarFp.conflictsControllerReportConflict(syncSessionId, xProjectId, authorization, reportConflictDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ConflictsApi - object-oriented interface
 * @export
 * @class ConflictsApi
 * @extends {BaseAPI}
 */
export class ConflictsApi extends BaseAPI {
    /**
     * 
     * @summary Get conflict by ID
     * @param {string} id Conflict ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConflictsApi
     */
    public conflictsControllerGetConflictById(id: string, options?: RawAxiosRequestConfig) {
        return ConflictsApiFp(this.configuration).conflictsControllerGetConflictById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get conflicts for a specific project
     * @param {string} projectId Project ID
     * @param {string} [userIdentifier] Filter by user identifier
     * @param {string} [deviceId] Filter by device ID
     * @param {string} [tableName] Filter by table name
     * @param {string} [recordId] Filter by record ID
     * @param {ConflictsControllerGetConflictsByProjectResolutionStrategyEnum} [resolutionStrategy] Filter by resolution strategy
     * @param {string} [startDate] Filter by start date (ISO format)
     * @param {string} [endDate] Filter by end date (ISO format)
     * @param {number} [limit] Number of conflicts to return
     * @param {number} [offset] Number of conflicts to skip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConflictsApi
     */
    public conflictsControllerGetConflictsByProject(projectId: string, userIdentifier?: string, deviceId?: string, tableName?: string, recordId?: string, resolutionStrategy?: ConflictsControllerGetConflictsByProjectResolutionStrategyEnum, startDate?: string, endDate?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return ConflictsApiFp(this.configuration).conflictsControllerGetConflictsByProject(projectId, userIdentifier, deviceId, tableName, recordId, resolutionStrategy, startDate, endDate, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get conflicts for a specific record
     * @param {string} tableName Table name
     * @param {string} recordId Record ID
     * @param {number} [limit] Number of conflicts to return
     * @param {number} [offset] Number of conflicts to skip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConflictsApi
     */
    public conflictsControllerGetConflictsByRecord(tableName: string, recordId: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return ConflictsApiFp(this.configuration).conflictsControllerGetConflictsByRecord(tableName, recordId, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get conflicts for a specific sync session
     * @param {string} sessionId Sync session ID
     * @param {number} [limit] Number of conflicts to return
     * @param {number} [offset] Number of conflicts to skip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConflictsApi
     */
    public conflictsControllerGetConflictsBySession(sessionId: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return ConflictsApiFp(this.configuration).conflictsControllerGetConflictsBySession(sessionId, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Report a conflict from a client
     * @param {string} syncSessionId 
     * @param {string} xProjectId Project ID
     * @param {string} authorization Project auth token
     * @param {ReportConflictDto} reportConflictDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConflictsApi
     */
    public conflictsControllerReportConflict(syncSessionId: string, xProjectId: string, authorization: string, reportConflictDto: ReportConflictDto, options?: RawAxiosRequestConfig) {
        return ConflictsApiFp(this.configuration).conflictsControllerReportConflict(syncSessionId, xProjectId, authorization, reportConflictDto, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ConflictsControllerGetConflictsByProjectResolutionStrategyEnum = {
    LastWriteWins: 'LAST_WRITE_WINS',
    ClientWins: 'CLIENT_WINS',
    ServerWins: 'SERVER_WINS',
    Custom: 'CUSTOM'
} as const;
export type ConflictsControllerGetConflictsByProjectResolutionStrategyEnum = typeof ConflictsControllerGetConflictsByProjectResolutionStrategyEnum[keyof typeof ConflictsControllerGetConflictsByProjectResolutionStrategyEnum];
