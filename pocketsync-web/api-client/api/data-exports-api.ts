/* tslint:disable */
/* eslint-disable */
/**
 * PocketSync API
 * API documentation for PocketSync backend services
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateDataExportJobDto } from '../model';
// @ts-ignore
import type { DataExportJobResponseDto } from '../model';
// @ts-ignore
import type { DataExportJobsResponseDto } from '../model';
/**
 * DataExportsApi - axios parameter creator
 * @export
 */
export const DataExportsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new data export job
         * @param {string} projectId 
         * @param {string} userId 
         * @param {CreateDataExportJobDto} createDataExportJobDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dataExportsControllerCreateExportJob: async (projectId: string, userId: string, createDataExportJobDto: CreateDataExportJobDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('dataExportsControllerCreateExportJob', 'projectId', projectId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('dataExportsControllerCreateExportJob', 'userId', userId)
            // verify required parameter 'createDataExportJobDto' is not null or undefined
            assertParamExists('dataExportsControllerCreateExportJob', 'createDataExportJobDto', createDataExportJobDto)
            const localVarPath = `/data-exports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (projectId !== undefined) {
                localVarQueryParameter['projectId'] = projectId;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createDataExportJobDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Download a data export file
         * @param {string} id Data export job ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dataExportsControllerDownloadExport: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('dataExportsControllerDownloadExport', 'id', id)
            const localVarPath = `/data-exports/download/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a data export job by ID
         * @param {string} id Data export job ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dataExportsControllerGetExportJob: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('dataExportsControllerGetExportJob', 'id', id)
            const localVarPath = `/data-exports/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get data export jobs for a specific project
         * @param {string} projectId Project ID
         * @param {number} [limit] Number of jobs to return
         * @param {number} [offset] Number of jobs to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dataExportsControllerGetExportJobsByProject: async (projectId: string, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('dataExportsControllerGetExportJobsByProject', 'projectId', projectId)
            const localVarPath = `/data-exports/project/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get data export jobs for a specific user
         * @param {string} userId User ID
         * @param {number} [limit] Number of jobs to return
         * @param {number} [offset] Number of jobs to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dataExportsControllerGetExportJobsByUser: async (userId: string, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('dataExportsControllerGetExportJobsByUser', 'userId', userId)
            const localVarPath = `/data-exports/user/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DataExportsApi - functional programming interface
 * @export
 */
export const DataExportsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DataExportsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new data export job
         * @param {string} projectId 
         * @param {string} userId 
         * @param {CreateDataExportJobDto} createDataExportJobDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dataExportsControllerCreateExportJob(projectId: string, userId: string, createDataExportJobDto: CreateDataExportJobDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataExportJobResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dataExportsControllerCreateExportJob(projectId, userId, createDataExportJobDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DataExportsApi.dataExportsControllerCreateExportJob']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Download a data export file
         * @param {string} id Data export job ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dataExportsControllerDownloadExport(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dataExportsControllerDownloadExport(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DataExportsApi.dataExportsControllerDownloadExport']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a data export job by ID
         * @param {string} id Data export job ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dataExportsControllerGetExportJob(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataExportJobResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dataExportsControllerGetExportJob(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DataExportsApi.dataExportsControllerGetExportJob']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get data export jobs for a specific project
         * @param {string} projectId Project ID
         * @param {number} [limit] Number of jobs to return
         * @param {number} [offset] Number of jobs to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dataExportsControllerGetExportJobsByProject(projectId: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataExportJobsResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dataExportsControllerGetExportJobsByProject(projectId, limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DataExportsApi.dataExportsControllerGetExportJobsByProject']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get data export jobs for a specific user
         * @param {string} userId User ID
         * @param {number} [limit] Number of jobs to return
         * @param {number} [offset] Number of jobs to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dataExportsControllerGetExportJobsByUser(userId: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataExportJobsResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dataExportsControllerGetExportJobsByUser(userId, limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DataExportsApi.dataExportsControllerGetExportJobsByUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DataExportsApi - factory interface
 * @export
 */
export const DataExportsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DataExportsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new data export job
         * @param {string} projectId 
         * @param {string} userId 
         * @param {CreateDataExportJobDto} createDataExportJobDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dataExportsControllerCreateExportJob(projectId: string, userId: string, createDataExportJobDto: CreateDataExportJobDto, options?: RawAxiosRequestConfig): AxiosPromise<DataExportJobResponseDto> {
            return localVarFp.dataExportsControllerCreateExportJob(projectId, userId, createDataExportJobDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Download a data export file
         * @param {string} id Data export job ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dataExportsControllerDownloadExport(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.dataExportsControllerDownloadExport(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a data export job by ID
         * @param {string} id Data export job ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dataExportsControllerGetExportJob(id: string, options?: RawAxiosRequestConfig): AxiosPromise<DataExportJobResponseDto> {
            return localVarFp.dataExportsControllerGetExportJob(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get data export jobs for a specific project
         * @param {string} projectId Project ID
         * @param {number} [limit] Number of jobs to return
         * @param {number} [offset] Number of jobs to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dataExportsControllerGetExportJobsByProject(projectId: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<DataExportJobsResponseDto> {
            return localVarFp.dataExportsControllerGetExportJobsByProject(projectId, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get data export jobs for a specific user
         * @param {string} userId User ID
         * @param {number} [limit] Number of jobs to return
         * @param {number} [offset] Number of jobs to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dataExportsControllerGetExportJobsByUser(userId: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<DataExportJobsResponseDto> {
            return localVarFp.dataExportsControllerGetExportJobsByUser(userId, limit, offset, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DataExportsApi - object-oriented interface
 * @export
 * @class DataExportsApi
 * @extends {BaseAPI}
 */
export class DataExportsApi extends BaseAPI {
    /**
     * 
     * @summary Create a new data export job
     * @param {string} projectId 
     * @param {string} userId 
     * @param {CreateDataExportJobDto} createDataExportJobDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataExportsApi
     */
    public dataExportsControllerCreateExportJob(projectId: string, userId: string, createDataExportJobDto: CreateDataExportJobDto, options?: RawAxiosRequestConfig) {
        return DataExportsApiFp(this.configuration).dataExportsControllerCreateExportJob(projectId, userId, createDataExportJobDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Download a data export file
     * @param {string} id Data export job ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataExportsApi
     */
    public dataExportsControllerDownloadExport(id: string, options?: RawAxiosRequestConfig) {
        return DataExportsApiFp(this.configuration).dataExportsControllerDownloadExport(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a data export job by ID
     * @param {string} id Data export job ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataExportsApi
     */
    public dataExportsControllerGetExportJob(id: string, options?: RawAxiosRequestConfig) {
        return DataExportsApiFp(this.configuration).dataExportsControllerGetExportJob(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get data export jobs for a specific project
     * @param {string} projectId Project ID
     * @param {number} [limit] Number of jobs to return
     * @param {number} [offset] Number of jobs to skip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataExportsApi
     */
    public dataExportsControllerGetExportJobsByProject(projectId: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return DataExportsApiFp(this.configuration).dataExportsControllerGetExportJobsByProject(projectId, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get data export jobs for a specific user
     * @param {string} userId User ID
     * @param {number} [limit] Number of jobs to return
     * @param {number} [offset] Number of jobs to skip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataExportsApi
     */
    public dataExportsControllerGetExportJobsByUser(userId: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return DataExportsApiFp(this.configuration).dataExportsControllerGetExportJobsByUser(userId, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
}

