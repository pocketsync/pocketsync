/* tslint:disable */
/* eslint-disable */
/**
 * PocketSync API
 * API documentation for PocketSync backend services
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { DeviceChangeResponseDto } from '../model';
// @ts-ignore
import type { DeviceChangeTimelineDto } from '../model';
// @ts-ignore
import type { TableChangesSummaryResponseDto } from '../model';
/**
 * DeviceChangesApi - axios parameter creator
 * @export
 */
export const DeviceChangesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get a single device change by ID
         * @param {string} projectId Project ID
         * @param {string} id Device change ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeviceChangeById: async (projectId: string, id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getDeviceChangeById', 'projectId', projectId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDeviceChangeById', 'id', id)
            const localVarPath = `/projects/{projectId}/device-changes/{id}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get device changes with filtering and pagination
         * @param {string} projectId Project ID
         * @param {string} [tableName] Filter by table name
         * @param {string} [recordId] Filter by record ID
         * @param {string} [changeType] Filter by change type (CREATE, UPDATE, DELETE)
         * @param {string} [deviceId] Filter by device ID
         * @param {string} [userIdentifier] Filter by user identifier
         * @param {string} [startDate] Start date for filtering (ISO format)
         * @param {string} [endDate] End date for filtering (ISO format)
         * @param {number} [page] Page number for pagination
         * @param {number} [limit] Items per page for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeviceChanges: async (projectId: string, tableName?: string, recordId?: string, changeType?: string, deviceId?: string, userIdentifier?: string, startDate?: string, endDate?: string, page?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getDeviceChanges', 'projectId', projectId)
            const localVarPath = `/projects/{projectId}/device-changes`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tableName !== undefined) {
                localVarQueryParameter['tableName'] = tableName;
            }

            if (recordId !== undefined) {
                localVarQueryParameter['recordId'] = recordId;
            }

            if (changeType !== undefined) {
                localVarQueryParameter['changeType'] = changeType;
            }

            if (deviceId !== undefined) {
                localVarQueryParameter['deviceId'] = deviceId;
            }

            if (userIdentifier !== undefined) {
                localVarQueryParameter['userIdentifier'] = userIdentifier;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get timeline of changes for a specific record
         * @param {string} projectId Project ID
         * @param {string} tableName Table name
         * @param {string} recordId Record ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecordTimeline: async (projectId: string, tableName: string, recordId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getRecordTimeline', 'projectId', projectId)
            // verify required parameter 'tableName' is not null or undefined
            assertParamExists('getRecordTimeline', 'tableName', tableName)
            // verify required parameter 'recordId' is not null or undefined
            assertParamExists('getRecordTimeline', 'recordId', recordId)
            const localVarPath = `/projects/{projectId}/device-changes/tables/{tableName}/records/{recordId}/timeline`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"tableName"}}`, encodeURIComponent(String(tableName)))
                .replace(`{${"recordId"}}`, encodeURIComponent(String(recordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a detailed summary of changes by table with counts by operation type
         * @param {string} projectId Project ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTableChangesSummary: async (projectId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getTableChangesSummary', 'projectId', projectId)
            const localVarPath = `/projects/{projectId}/device-changes/tables-summary`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get unique table names from device changes
         * @param {string} projectId Project ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTableNames: async (projectId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getTableNames', 'projectId', projectId)
            const localVarPath = `/projects/{projectId}/device-changes/tables`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DeviceChangesApi - functional programming interface
 * @export
 */
export const DeviceChangesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DeviceChangesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get a single device change by ID
         * @param {string} projectId Project ID
         * @param {string} id Device change ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeviceChangeById(projectId: string, id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceChangeResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDeviceChangeById(projectId, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DeviceChangesApi.getDeviceChangeById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get device changes with filtering and pagination
         * @param {string} projectId Project ID
         * @param {string} [tableName] Filter by table name
         * @param {string} [recordId] Filter by record ID
         * @param {string} [changeType] Filter by change type (CREATE, UPDATE, DELETE)
         * @param {string} [deviceId] Filter by device ID
         * @param {string} [userIdentifier] Filter by user identifier
         * @param {string} [startDate] Start date for filtering (ISO format)
         * @param {string} [endDate] End date for filtering (ISO format)
         * @param {number} [page] Page number for pagination
         * @param {number} [limit] Items per page for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeviceChanges(projectId: string, tableName?: string, recordId?: string, changeType?: string, deviceId?: string, userIdentifier?: string, startDate?: string, endDate?: string, page?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceChangeResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDeviceChanges(projectId, tableName, recordId, changeType, deviceId, userIdentifier, startDate, endDate, page, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DeviceChangesApi.getDeviceChanges']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get timeline of changes for a specific record
         * @param {string} projectId Project ID
         * @param {string} tableName Table name
         * @param {string} recordId Record ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecordTimeline(projectId: string, tableName: string, recordId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceChangeTimelineDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecordTimeline(projectId, tableName, recordId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DeviceChangesApi.getRecordTimeline']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a detailed summary of changes by table with counts by operation type
         * @param {string} projectId Project ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTableChangesSummary(projectId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TableChangesSummaryResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTableChangesSummary(projectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DeviceChangesApi.getTableChangesSummary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get unique table names from device changes
         * @param {string} projectId Project ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTableNames(projectId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTableNames(projectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DeviceChangesApi.getTableNames']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DeviceChangesApi - factory interface
 * @export
 */
export const DeviceChangesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DeviceChangesApiFp(configuration)
    return {
        /**
         * 
         * @summary Get a single device change by ID
         * @param {string} projectId Project ID
         * @param {string} id Device change ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeviceChangeById(projectId: string, id: string, options?: RawAxiosRequestConfig): AxiosPromise<DeviceChangeResponseDto> {
            return localVarFp.getDeviceChangeById(projectId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get device changes with filtering and pagination
         * @param {string} projectId Project ID
         * @param {string} [tableName] Filter by table name
         * @param {string} [recordId] Filter by record ID
         * @param {string} [changeType] Filter by change type (CREATE, UPDATE, DELETE)
         * @param {string} [deviceId] Filter by device ID
         * @param {string} [userIdentifier] Filter by user identifier
         * @param {string} [startDate] Start date for filtering (ISO format)
         * @param {string} [endDate] End date for filtering (ISO format)
         * @param {number} [page] Page number for pagination
         * @param {number} [limit] Items per page for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeviceChanges(projectId: string, tableName?: string, recordId?: string, changeType?: string, deviceId?: string, userIdentifier?: string, startDate?: string, endDate?: string, page?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<DeviceChangeResponseDto> {
            return localVarFp.getDeviceChanges(projectId, tableName, recordId, changeType, deviceId, userIdentifier, startDate, endDate, page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get timeline of changes for a specific record
         * @param {string} projectId Project ID
         * @param {string} tableName Table name
         * @param {string} recordId Record ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecordTimeline(projectId: string, tableName: string, recordId: string, options?: RawAxiosRequestConfig): AxiosPromise<DeviceChangeTimelineDto> {
            return localVarFp.getRecordTimeline(projectId, tableName, recordId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a detailed summary of changes by table with counts by operation type
         * @param {string} projectId Project ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTableChangesSummary(projectId: string, options?: RawAxiosRequestConfig): AxiosPromise<TableChangesSummaryResponseDto> {
            return localVarFp.getTableChangesSummary(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get unique table names from device changes
         * @param {string} projectId Project ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTableNames(projectId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<string>> {
            return localVarFp.getTableNames(projectId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DeviceChangesApi - object-oriented interface
 * @export
 * @class DeviceChangesApi
 * @extends {BaseAPI}
 */
export class DeviceChangesApi extends BaseAPI {
    /**
     * 
     * @summary Get a single device change by ID
     * @param {string} projectId Project ID
     * @param {string} id Device change ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceChangesApi
     */
    public getDeviceChangeById(projectId: string, id: string, options?: RawAxiosRequestConfig) {
        return DeviceChangesApiFp(this.configuration).getDeviceChangeById(projectId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get device changes with filtering and pagination
     * @param {string} projectId Project ID
     * @param {string} [tableName] Filter by table name
     * @param {string} [recordId] Filter by record ID
     * @param {string} [changeType] Filter by change type (CREATE, UPDATE, DELETE)
     * @param {string} [deviceId] Filter by device ID
     * @param {string} [userIdentifier] Filter by user identifier
     * @param {string} [startDate] Start date for filtering (ISO format)
     * @param {string} [endDate] End date for filtering (ISO format)
     * @param {number} [page] Page number for pagination
     * @param {number} [limit] Items per page for pagination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceChangesApi
     */
    public getDeviceChanges(projectId: string, tableName?: string, recordId?: string, changeType?: string, deviceId?: string, userIdentifier?: string, startDate?: string, endDate?: string, page?: number, limit?: number, options?: RawAxiosRequestConfig) {
        return DeviceChangesApiFp(this.configuration).getDeviceChanges(projectId, tableName, recordId, changeType, deviceId, userIdentifier, startDate, endDate, page, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get timeline of changes for a specific record
     * @param {string} projectId Project ID
     * @param {string} tableName Table name
     * @param {string} recordId Record ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceChangesApi
     */
    public getRecordTimeline(projectId: string, tableName: string, recordId: string, options?: RawAxiosRequestConfig) {
        return DeviceChangesApiFp(this.configuration).getRecordTimeline(projectId, tableName, recordId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a detailed summary of changes by table with counts by operation type
     * @param {string} projectId Project ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceChangesApi
     */
    public getTableChangesSummary(projectId: string, options?: RawAxiosRequestConfig) {
        return DeviceChangesApiFp(this.configuration).getTableChangesSummary(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get unique table names from device changes
     * @param {string} projectId Project ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceChangesApi
     */
    public getTableNames(projectId: string, options?: RawAxiosRequestConfig) {
        return DeviceChangesApiFp(this.configuration).getTableNames(projectId, options).then((request) => request(this.axios, this.basePath));
    }
}

