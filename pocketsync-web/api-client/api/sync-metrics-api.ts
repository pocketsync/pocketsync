/* tslint:disable */
/* eslint-disable */
/**
 * PocketSync API
 * API documentation for PocketSync backend services
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { SyncMetricDto } from '../model';
// @ts-ignore
import type { SyncMetricResponseDto } from '../model';
// @ts-ignore
import type { SyncMetricsControllerGetAggregatedMetrics200Response } from '../model';
/**
 * SyncMetricsApi - axios parameter creator
 * @export
 */
export const SyncMetricsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get aggregated metrics for a specific project and metric type
         * @param {string} projectId Project ID
         * @param {string} metricType Metric type
         * @param {SyncMetricsControllerGetAggregatedMetricsIntervalEnum} interval Aggregation interval
         * @param {string} startDate Start date (ISO format)
         * @param {string} endDate End date (ISO format)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncMetricsControllerGetAggregatedMetrics: async (projectId: string, metricType: string, interval: SyncMetricsControllerGetAggregatedMetricsIntervalEnum, startDate: string, endDate: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('syncMetricsControllerGetAggregatedMetrics', 'projectId', projectId)
            // verify required parameter 'metricType' is not null or undefined
            assertParamExists('syncMetricsControllerGetAggregatedMetrics', 'metricType', metricType)
            // verify required parameter 'interval' is not null or undefined
            assertParamExists('syncMetricsControllerGetAggregatedMetrics', 'interval', interval)
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('syncMetricsControllerGetAggregatedMetrics', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('syncMetricsControllerGetAggregatedMetrics', 'endDate', endDate)
            const localVarPath = `/sync-metrics/aggregate/{projectId}/{metricType}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"metricType"}}`, encodeURIComponent(String(metricType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (interval !== undefined) {
                localVarQueryParameter['interval'] = interval;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get metrics for a specific device
         * @param {string} deviceId Device ID
         * @param {string} userIdentifier User identifier
         * @param {string} [metricType] Filter by metric type
         * @param {string} [startDate] Filter by start date (ISO format)
         * @param {string} [endDate] Filter by end date (ISO format)
         * @param {number} [limit] Number of metrics to return
         * @param {number} [offset] Number of metrics to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncMetricsControllerGetMetricsByDevice: async (deviceId: string, userIdentifier: string, metricType?: string, startDate?: string, endDate?: string, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('syncMetricsControllerGetMetricsByDevice', 'deviceId', deviceId)
            // verify required parameter 'userIdentifier' is not null or undefined
            assertParamExists('syncMetricsControllerGetMetricsByDevice', 'userIdentifier', userIdentifier)
            const localVarPath = `/sync-metrics/device/{deviceId}/user/{userIdentifier}`
                .replace(`{${"deviceId"}}`, encodeURIComponent(String(deviceId)))
                .replace(`{${"userIdentifier"}}`, encodeURIComponent(String(userIdentifier)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (metricType !== undefined) {
                localVarQueryParameter['metricType'] = metricType;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get metrics for a specific project
         * @param {string} projectId Project ID
         * @param {string} [userIdentifier] Filter by user identifier
         * @param {string} [deviceId] Filter by device ID
         * @param {string} [metricType] Filter by metric type
         * @param {string} [startDate] Filter by start date (ISO format)
         * @param {string} [endDate] Filter by end date (ISO format)
         * @param {number} [limit] Number of metrics to return
         * @param {number} [offset] Number of metrics to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncMetricsControllerGetMetricsByProject: async (projectId: string, userIdentifier?: string, deviceId?: string, metricType?: string, startDate?: string, endDate?: string, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('syncMetricsControllerGetMetricsByProject', 'projectId', projectId)
            const localVarPath = `/sync-metrics/project/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userIdentifier !== undefined) {
                localVarQueryParameter['userIdentifier'] = userIdentifier;
            }

            if (deviceId !== undefined) {
                localVarQueryParameter['deviceId'] = deviceId;
            }

            if (metricType !== undefined) {
                localVarQueryParameter['metricType'] = metricType;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Record a new metric from a client
         * @param {string} xProjectId Project ID
         * @param {string} authorization Project auth token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncMetricsControllerRecordMetric: async (xProjectId: string, authorization: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xProjectId' is not null or undefined
            assertParamExists('syncMetricsControllerRecordMetric', 'xProjectId', xProjectId)
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('syncMetricsControllerRecordMetric', 'authorization', authorization)
            const localVarPath = `/sync-metrics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (xProjectId != null) {
                localVarHeaderParameter['x-project-id'] = String(xProjectId);
            }
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SyncMetricsApi - functional programming interface
 * @export
 */
export const SyncMetricsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SyncMetricsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get aggregated metrics for a specific project and metric type
         * @param {string} projectId Project ID
         * @param {string} metricType Metric type
         * @param {SyncMetricsControllerGetAggregatedMetricsIntervalEnum} interval Aggregation interval
         * @param {string} startDate Start date (ISO format)
         * @param {string} endDate End date (ISO format)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncMetricsControllerGetAggregatedMetrics(projectId: string, metricType: string, interval: SyncMetricsControllerGetAggregatedMetricsIntervalEnum, startDate: string, endDate: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SyncMetricsControllerGetAggregatedMetrics200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncMetricsControllerGetAggregatedMetrics(projectId, metricType, interval, startDate, endDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SyncMetricsApi.syncMetricsControllerGetAggregatedMetrics']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get metrics for a specific device
         * @param {string} deviceId Device ID
         * @param {string} userIdentifier User identifier
         * @param {string} [metricType] Filter by metric type
         * @param {string} [startDate] Filter by start date (ISO format)
         * @param {string} [endDate] Filter by end date (ISO format)
         * @param {number} [limit] Number of metrics to return
         * @param {number} [offset] Number of metrics to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncMetricsControllerGetMetricsByDevice(deviceId: string, userIdentifier: string, metricType?: string, startDate?: string, endDate?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SyncMetricResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncMetricsControllerGetMetricsByDevice(deviceId, userIdentifier, metricType, startDate, endDate, limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SyncMetricsApi.syncMetricsControllerGetMetricsByDevice']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get metrics for a specific project
         * @param {string} projectId Project ID
         * @param {string} [userIdentifier] Filter by user identifier
         * @param {string} [deviceId] Filter by device ID
         * @param {string} [metricType] Filter by metric type
         * @param {string} [startDate] Filter by start date (ISO format)
         * @param {string} [endDate] Filter by end date (ISO format)
         * @param {number} [limit] Number of metrics to return
         * @param {number} [offset] Number of metrics to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncMetricsControllerGetMetricsByProject(projectId: string, userIdentifier?: string, deviceId?: string, metricType?: string, startDate?: string, endDate?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SyncMetricResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncMetricsControllerGetMetricsByProject(projectId, userIdentifier, deviceId, metricType, startDate, endDate, limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SyncMetricsApi.syncMetricsControllerGetMetricsByProject']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Record a new metric from a client
         * @param {string} xProjectId Project ID
         * @param {string} authorization Project auth token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncMetricsControllerRecordMetric(xProjectId: string, authorization: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SyncMetricDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncMetricsControllerRecordMetric(xProjectId, authorization, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SyncMetricsApi.syncMetricsControllerRecordMetric']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SyncMetricsApi - factory interface
 * @export
 */
export const SyncMetricsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SyncMetricsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get aggregated metrics for a specific project and metric type
         * @param {string} projectId Project ID
         * @param {string} metricType Metric type
         * @param {SyncMetricsControllerGetAggregatedMetricsIntervalEnum} interval Aggregation interval
         * @param {string} startDate Start date (ISO format)
         * @param {string} endDate End date (ISO format)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncMetricsControllerGetAggregatedMetrics(projectId: string, metricType: string, interval: SyncMetricsControllerGetAggregatedMetricsIntervalEnum, startDate: string, endDate: string, options?: RawAxiosRequestConfig): AxiosPromise<SyncMetricsControllerGetAggregatedMetrics200Response> {
            return localVarFp.syncMetricsControllerGetAggregatedMetrics(projectId, metricType, interval, startDate, endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get metrics for a specific device
         * @param {string} deviceId Device ID
         * @param {string} userIdentifier User identifier
         * @param {string} [metricType] Filter by metric type
         * @param {string} [startDate] Filter by start date (ISO format)
         * @param {string} [endDate] Filter by end date (ISO format)
         * @param {number} [limit] Number of metrics to return
         * @param {number} [offset] Number of metrics to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncMetricsControllerGetMetricsByDevice(deviceId: string, userIdentifier: string, metricType?: string, startDate?: string, endDate?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<SyncMetricResponseDto> {
            return localVarFp.syncMetricsControllerGetMetricsByDevice(deviceId, userIdentifier, metricType, startDate, endDate, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get metrics for a specific project
         * @param {string} projectId Project ID
         * @param {string} [userIdentifier] Filter by user identifier
         * @param {string} [deviceId] Filter by device ID
         * @param {string} [metricType] Filter by metric type
         * @param {string} [startDate] Filter by start date (ISO format)
         * @param {string} [endDate] Filter by end date (ISO format)
         * @param {number} [limit] Number of metrics to return
         * @param {number} [offset] Number of metrics to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncMetricsControllerGetMetricsByProject(projectId: string, userIdentifier?: string, deviceId?: string, metricType?: string, startDate?: string, endDate?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<SyncMetricResponseDto> {
            return localVarFp.syncMetricsControllerGetMetricsByProject(projectId, userIdentifier, deviceId, metricType, startDate, endDate, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Record a new metric from a client
         * @param {string} xProjectId Project ID
         * @param {string} authorization Project auth token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncMetricsControllerRecordMetric(xProjectId: string, authorization: string, options?: RawAxiosRequestConfig): AxiosPromise<SyncMetricDto> {
            return localVarFp.syncMetricsControllerRecordMetric(xProjectId, authorization, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SyncMetricsApi - object-oriented interface
 * @export
 * @class SyncMetricsApi
 * @extends {BaseAPI}
 */
export class SyncMetricsApi extends BaseAPI {
    /**
     * 
     * @summary Get aggregated metrics for a specific project and metric type
     * @param {string} projectId Project ID
     * @param {string} metricType Metric type
     * @param {SyncMetricsControllerGetAggregatedMetricsIntervalEnum} interval Aggregation interval
     * @param {string} startDate Start date (ISO format)
     * @param {string} endDate End date (ISO format)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncMetricsApi
     */
    public syncMetricsControllerGetAggregatedMetrics(projectId: string, metricType: string, interval: SyncMetricsControllerGetAggregatedMetricsIntervalEnum, startDate: string, endDate: string, options?: RawAxiosRequestConfig) {
        return SyncMetricsApiFp(this.configuration).syncMetricsControllerGetAggregatedMetrics(projectId, metricType, interval, startDate, endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get metrics for a specific device
     * @param {string} deviceId Device ID
     * @param {string} userIdentifier User identifier
     * @param {string} [metricType] Filter by metric type
     * @param {string} [startDate] Filter by start date (ISO format)
     * @param {string} [endDate] Filter by end date (ISO format)
     * @param {number} [limit] Number of metrics to return
     * @param {number} [offset] Number of metrics to skip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncMetricsApi
     */
    public syncMetricsControllerGetMetricsByDevice(deviceId: string, userIdentifier: string, metricType?: string, startDate?: string, endDate?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return SyncMetricsApiFp(this.configuration).syncMetricsControllerGetMetricsByDevice(deviceId, userIdentifier, metricType, startDate, endDate, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get metrics for a specific project
     * @param {string} projectId Project ID
     * @param {string} [userIdentifier] Filter by user identifier
     * @param {string} [deviceId] Filter by device ID
     * @param {string} [metricType] Filter by metric type
     * @param {string} [startDate] Filter by start date (ISO format)
     * @param {string} [endDate] Filter by end date (ISO format)
     * @param {number} [limit] Number of metrics to return
     * @param {number} [offset] Number of metrics to skip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncMetricsApi
     */
    public syncMetricsControllerGetMetricsByProject(projectId: string, userIdentifier?: string, deviceId?: string, metricType?: string, startDate?: string, endDate?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return SyncMetricsApiFp(this.configuration).syncMetricsControllerGetMetricsByProject(projectId, userIdentifier, deviceId, metricType, startDate, endDate, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Record a new metric from a client
     * @param {string} xProjectId Project ID
     * @param {string} authorization Project auth token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncMetricsApi
     */
    public syncMetricsControllerRecordMetric(xProjectId: string, authorization: string, options?: RawAxiosRequestConfig) {
        return SyncMetricsApiFp(this.configuration).syncMetricsControllerRecordMetric(xProjectId, authorization, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const SyncMetricsControllerGetAggregatedMetricsIntervalEnum = {
    Hour: 'hour',
    Day: 'day',
    Week: 'week',
    Month: 'month'
} as const;
export type SyncMetricsControllerGetAggregatedMetricsIntervalEnum = typeof SyncMetricsControllerGetAggregatedMetricsIntervalEnum[keyof typeof SyncMetricsControllerGetAggregatedMetricsIntervalEnum];
